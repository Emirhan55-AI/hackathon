# Aura AI Platform - API Gateway Configuration
# Nginx reverse proxy configuration for microservices

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream: $upstream_addr response_time: $upstream_response_time';
                    
    access_log /var/log/nginx/access.log main;
    
    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    client_max_body_size 10M;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;

    # Upstream service definitions
    upstream visual_analysis_service {
        server visual_analysis_service:8000;
        keepalive 32;
    }
    
    upstream outfit_recommendation_service {
        server outfit_recommendation_service:8001;
        keepalive 32;
    }
    
    upstream conversational_ai_service {
        server conversational_ai_service:8003;
        keepalive 32;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=upload_limit:10m rate=10r/m;

    # Main server configuration
    server {
        listen 80;
        server_name localhost aura-api.local;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
        
        # Root endpoint - API Gateway status
        location / {
            return 200 '{"service":"Aura AI Platform API Gateway","version":"1.0.0","status":"active","microservices":{"visual_analysis":"/api/v1/visual-analysis","outfit_recommendation":"/api/v1/outfit-recommendation","conversational_ai":"/api/v1/conversational-ai"},"docs":{"visual_analysis":"http://localhost/api/v1/visual-analysis/docs","outfit_recommendation":"http://localhost/api/v1/outfit-recommendation/docs","conversational_ai":"http://localhost/api/v1/conversational-ai/docs"}}';
            add_header Content-Type application/json;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 '{"status":"healthy","gateway":"nginx","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }

        # Visual Analysis Service routes
        location /api/v1/visual-analysis/ {
            # Rate limiting
            limit_req zone=api_limit burst=20 nodelay;
            limit_req zone=upload_limit burst=5 nodelay;
            
            # Proxy settings
            proxy_pass http://visual_analysis_service/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            # Buffer settings for large responses (images)
            proxy_buffering on;
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
        }

        # Outfit Recommendation Service routes
        location /api/v1/outfit-recommendation/ {
            # Rate limiting
            limit_req zone=api_limit burst=20 nodelay;
            
            # Proxy settings
            proxy_pass http://outfit_recommendation_service/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 120s;
            proxy_read_timeout 120s;
        }

        # Conversational AI Service routes
        location /api/v1/conversational-ai/ {
            # Rate limiting
            limit_req zone=api_limit burst=20 nodelay;
            
            # Proxy settings
            proxy_pass http://conversational_ai_service/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 120s;
            proxy_read_timeout 120s;
        }

        # WebSocket support for Conversational AI
        location /api/v1/conversational-ai/ws/ {
            proxy_pass http://conversational_ai_service/ws/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket specific timeouts
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
        }

        # Static files and documentation
        location /docs {
            return 302 /api/v1/visual-analysis/docs;
        }
        
        location /redoc {
            return 302 /api/v1/visual-analysis/redoc;
        }

        # Custom error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            internal;
            return 404 '{"error":"Not Found","message":"The requested endpoint does not exist","available_endpoints":["/api/v1/visual-analysis","/api/v1/outfit-recommendation","/api/v1/conversational-ai"]}';
            add_header Content-Type application/json;
        }
        
        location = /50x.html {
            internal;
            return 500 '{"error":"Internal Server Error","message":"One of the microservices is temporarily unavailable","retry_after":"30s"}';
            add_header Content-Type application/json;
        }
    }

    # HTTPS server configuration (for production)
    # server {
    #     listen 443 ssl http2;
    #     server_name aura-api.local;
    #     
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     
    #     # Include the same location blocks as above
    # }
}
