# Visual Analysis Service - Kubernetes Deployment and Service
# DETR-based computer vision for fashion item detection and analysis

apiVersion: apps/v1
kind: Deployment
metadata:
  name: visual-analysis-deployment
  namespace: aura-ai
  labels:
    app.kubernetes.io/name: visual-analysis
    app.kubernetes.io/instance: production
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: microservice
    app.kubernetes.io/part-of: aura-ai-platform
    app.kubernetes.io/managed-by: kubernetes
spec:
  replicas: 3  # Start with 3 replicas for HA
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: visual-analysis
  template:
    metadata:
      labels:
        app: visual-analysis
        app.kubernetes.io/name: visual-analysis
        app.kubernetes.io/component: microservice
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: aura-ai-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      
      initContainers:
      # Model downloader init container
      - name: model-downloader
        image: gcr.io/PROJECT_ID/aura-model-downloader:latest
        imagePullPolicy: IfNotPresent
        command:
        - /bin/sh
        - -c
        - |
          echo "Downloading DETR models..."
          if [ ! -f /models/detr-resnet-50/pytorch_model.bin ]; then
            echo "Downloading DETR ResNet-50 model..."
            python -c "
            from transformers import DETransformerModel, DETransformerConfig
            model = DETransformerModel.from_pretrained('facebook/detr-resnet-50')
            model.save_pretrained('/models/detr-resnet-50')
            "
          fi
          if [ ! -f /models/fashion-detr/pytorch_model.bin ]; then
            echo "Downloading fashion-specific DETR model..."
            python -c "
            from transformers import DETransformerModel
            model = DETransformerModel.from_pretrained('fashion-detr-model')
            model.save_pretrained('/models/fashion-detr')
            "
          fi
          echo "Model download completed"
        env:
        - name: HF_TOKEN
          valueFrom:
            secretKeyRef:
              name: aura-ai-secrets
              key: HF_TOKEN
        - name: TRANSFORMERS_CACHE
          value: "/models"
        volumeMounts:
        - name: model-storage
          mountPath: /models
        resources:
          requests:
            cpu: 500m
            memory: 2Gi
          limits:
            cpu: 1000m
            memory: 4Gi

      containers:
      - name: visual-analysis
        image: gcr.io/PROJECT_ID/aura-visual-analysis:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        - containerPort: 8080
          name: metrics
          protocol: TCP
        
        env:
        - name: SERVICE_NAME
          value: "visual-analysis"
        - name: MODEL_PATH
          value: "/app/models"
        - name: DEVICE
          valueFrom:
            configMapKeyRef:
              name: aura-ai-config
              key: DEVICE
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: aura-ai-config
              key: LOG_LEVEL
        - name: MAX_WORKERS
          valueFrom:
            configMapKeyRef:
              name: aura-ai-config
              key: MAX_WORKERS
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: aura-ai-config
              key: POSTGRES_HOST
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: aura-ai-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: aura-ai-secrets
              key: POSTGRES_PASSWORD
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: aura-ai-config
              key: REDIS_HOST
        
        volumeMounts:
        - name: model-storage
          mountPath: /app/models
          readOnly: true
        - name: logs-storage
          mountPath: /app/logs
        
        resources:
          requests:
            cpu: 2000m
            memory: 8Gi
            nvidia.com/gpu: 1
          limits:
            cpu: 4000m
            memory: 16Gi
            nvidia.com/gpu: 1
        
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - "sleep 15"  # Grace period for existing requests

      volumes:
      - name: model-storage
        persistentVolumeClaim:
          claimName: model-storage-pvc
      - name: logs-storage
        persistentVolumeClaim:
          claimName: logs-pvc

      imagePullSecrets:
      - name: aura-ai-registry-secret

      nodeSelector:
        cloud.google.com/gke-accelerator: nvidia-tesla-t4  # GPU node selector

      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule

      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - visual-analysis
              topologyKey: kubernetes.io/hostname

---
# Visual Analysis Service
apiVersion: v1
kind: Service
metadata:
  name: visual-analysis-service
  namespace: aura-ai
  labels:
    app.kubernetes.io/name: visual-analysis
    app.kubernetes.io/component: service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  selector:
    app: visual-analysis
  ports:
  - name: http
    port: 8000
    targetPort: 8000
    protocol: TCP
  - name: metrics
    port: 8080
    targetPort: 8080
    protocol: TCP

---
# Horizontal Pod Autoscaler for Visual Analysis
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: visual-analysis-hpa
  namespace: aura-ai
  labels:
    app.kubernetes.io/name: visual-analysis
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: visual-analysis-deployment
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Resource
    resource:
      name: nvidia.com/gpu
      target:
        type: Utilization
        averageUtilization: 85
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
