# Code Quality and Testing Workflow for Aura AI Platform
# This workflow runs on every pull request and push to ensure code quality

name: Code Quality and Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Job for code quality checks and tests for Visual Analysis service
  visual-analysis-quality:
    name: Visual Analysis - Code Quality & Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-visual-analysis-${{ hashFiles('services/visual_analysis/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-visual-analysis-
          
    - name: Install dependencies
      working-directory: ./services/visual_analysis
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 mypy pytest pytest-cov pytest-asyncio
        
    - name: Code formatting check with Black
      working-directory: ./services/visual_analysis
      run: |
        black --check --diff src/ tests/
        
    - name: Linting with flake8
      working-directory: ./services/visual_analysis
      run: |
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        
    - name: Type checking with mypy
      working-directory: ./services/visual_analysis
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional
        
    - name: Run tests with pytest
      working-directory: ./services/visual_analysis
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./services/visual_analysis/coverage.xml
        flags: visual-analysis
        name: visual-analysis-coverage

  # Job for code quality checks and tests for Outfit Recommendation service
  outfit-recommendation-quality:
    name: Outfit Recommendation - Code Quality & Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-outfit-recommendation-${{ hashFiles('services/outfit_recommendation/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-outfit-recommendation-
          
    - name: Install dependencies
      working-directory: ./services/outfit_recommendation
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 mypy pytest pytest-cov pytest-asyncio
        
    - name: Code formatting check with Black
      working-directory: ./services/outfit_recommendation
      run: |
        black --check --diff src/ tests/
        
    - name: Linting with flake8
      working-directory: ./services/outfit_recommendation
      run: |
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        
    - name: Type checking with mypy
      working-directory: ./services/outfit_recommendation
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional
        
    - name: Run tests with pytest
      working-directory: ./services/outfit_recommendation
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./services/outfit_recommendation/coverage.xml
        flags: outfit-recommendation
        name: outfit-recommendation-coverage

  # Job for code quality checks and tests for Conversational AI service
  conversational-ai-quality:
    name: Conversational AI - Code Quality & Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-conversational-ai-${{ hashFiles('services/conversational_ai/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-conversational-ai-
          
    - name: Install dependencies
      working-directory: ./services/conversational_ai
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 mypy pytest pytest-cov pytest-asyncio
        
    - name: Code formatting check with Black
      working-directory: ./services/conversational_ai
      run: |
        black --check --diff src/ tests/
        
    - name: Linting with flake8
      working-directory: ./services/conversational_ai
      run: |
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        
    - name: Type checking with mypy
      working-directory: ./services/conversational_ai
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional
        
    - name: Run tests with pytest
      working-directory: ./services/conversational_ai
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./services/conversational_ai/coverage.xml
        flags: conversational-ai
        name: conversational-ai-coverage

  # Job for Docker configuration validation
  docker-validation:
    name: Docker Configuration Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Validate Docker Compose
      run: |
        docker-compose config
        
    - name: Validate Dockerfiles
      run: |
        # Install hadolint for Dockerfile linting
        wget -O hadolint https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64
        chmod +x hadolint
        
        # Lint all Dockerfiles
        find . -name "Dockerfile*" -exec ./hadolint {} \;

  # Job for Kubernetes configuration validation
  kubernetes-validation:
    name: Kubernetes Configuration Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Install kubeval
      run: |
        wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
        tar xf kubeval-linux-amd64.tar.gz
        sudo mv kubeval /usr/local/bin
        
    - name: Validate Kubernetes manifests
      run: |
        for file in kubernetes/*.yaml; do
          echo "Validating $file"
          kubeval "$file"
        done
        
    - name: Install and run kube-score
      run: |
        wget https://github.com/zegl/kube-score/releases/download/v1.16.1/kube-score_1.16.1_linux_amd64.tar.gz
        tar xzf kube-score_1.16.1_linux_amd64.tar.gz
        sudo mv kube-score /usr/local/bin/
        
        # Run kube-score on all manifests
        kube-score score kubernetes/*.yaml

  # Job for security scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Bandit security linter
      run: |
        pip install bandit
        bandit -r services/ -f json -o bandit-report.json || true
        
    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json

  # Job for dependency vulnerability scanning
  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install safety
      run: pip install safety
      
    - name: Check Visual Analysis dependencies
      working-directory: ./services/visual_analysis
      run: |
        pip install -r requirements.txt
        safety check --json --output safety-visual-analysis.json || true
        
    - name: Check Outfit Recommendation dependencies
      working-directory: ./services/outfit_recommendation
      run: |
        pip install -r requirements.txt
        safety check --json --output safety-outfit-recommendation.json || true
        
    - name: Check Conversational AI dependencies
      working-directory: ./services/conversational_ai
      run: |
        pip install -r requirements.txt
        safety check --json --output safety-conversational-ai.json || true
        
    - name: Upload safety reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: safety-reports
        path: services/*/safety-*.json

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [visual-analysis-quality, outfit-recommendation-quality, conversational-ai-quality]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_aura_platform
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install integration test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio httpx requests psycopg2-binary redis
        
    - name: Wait for services to be ready
      run: |
        sleep 10
        
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_aura_platform
        REDIS_URL: redis://localhost:6379
      run: |
        # Create integration tests directory if it doesn't exist
        mkdir -p tests/integration
        
        # Run integration tests (if they exist)
        if [ -d "tests/integration" ] && [ "$(ls -A tests/integration)" ]; then
          pytest tests/integration/ -v
        else
          echo "No integration tests found, skipping..."
        fi

  # Final status check
  all-checks-passed:
    name: All Quality Checks Passed
    runs-on: ubuntu-latest
    needs: [
      visual-analysis-quality,
      outfit-recommendation-quality, 
      conversational-ai-quality,
      docker-validation,
      kubernetes-validation,
      security-scan,
      dependency-check,
      integration-tests
    ]
    
    steps:
    - name: All checks passed
      run: |
        echo "🎉 All code quality checks, tests, and security scans have passed!"
        echo "✅ Visual Analysis service: OK"
        echo "✅ Outfit Recommendation service: OK"
        echo "✅ Conversational AI service: OK"
        echo "✅ Docker configuration: OK"
        echo "✅ Kubernetes manifests: OK"
        echo "✅ Security scanning: OK"
        echo "✅ Dependency checking: OK"
        echo "✅ Integration tests: OK"
        echo ""
        echo "The code is ready for deployment! 🚀"
